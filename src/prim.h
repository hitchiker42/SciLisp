/* This file is automatically generated, do not edit*/
/* Declarations of predefined symbols/macros to generate predefined symbols
   
   Copyright (C) 2014 Tucker DiNapoli

   This file is part of SciLisp.

   SciLisp is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   SciLisp is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with SciLisp.  If not, see <http://www.gnu.org*/
#ifndef _PRIM_H_
#define _PRIM_H_
#define DECLARE_GLOBAL(name)                    \
  extern symbol *name;                          \
  extern sexp name##_sexp;

#define DEFSUBR(cname,numargs)                    \
  sexp cname DEFUN_ARGS_##numargs ;               \
  extern subr cname ## _fun
#define DEFUN_ARGS_0	(void)
#define DEFUN_ARGS_1	(sexp)
#define DEFUN_ARGS_2	(sexp, sexp)
#define DEFUN_ARGS_3	(sexp, sexp, sexp)
#define DEFUN_ARGS_4	(sexp, sexp, sexp, sexp)
#define DEFUN_ARGS_5	(sexp, sexp, sexp, sexp,        \
                         sexp)
#define DEFUN_ARGS_6	(sexp, sexp, sexp, sexp,        \
                         sexp, sexp)
#define DEFUN_ARGS_7	(sexp, sexp, sexp, sexp,        \
                         sexp, sexp, sexp)
#define DEFUN_ARGS_8	(sexp, sexp, sexp, sexp,        \
                         sexp, sexp, sexp, sexp)
#define DEFUN_ARGS_MANY (uint64_t,sexp*)
#define DEFUN_ARGS_UNEVALED (sexp)
static void* GC_REALLOC_3(void* ptr,size_t old,size_t new){
  return GC_REALLOC(ptr,new);
}
static void GC_FREE_2(void* ptr,size_t size){
  return GC_FREE(ptr);
}
static void* GC_MALLOC_1(size_t size){
  return GC_MALLOC(size);
}
extern const sexp lisp_pi;
extern const sexp lisp_euler;
extern const sexp lisp_max_long;
extern const sexp lisp_mach_eps;
extern symref lisp_ans_ptr;
extern sexp type_of_tag(sexp_tag tag);
extern sexp type_of(sexp obj);
void initPrims();
#ifdef INSIDE_PRIMS
#define MAKE_SELF_QUOTING_SYMBOL(cname,lname,sym_len,sym_hashv,proplist) \
  symbol_name cname##_name={.hashv=sym_hashv,                           \
                            .name_len=sym_len,.name=lname};             \
  symbol cname##_val={.name=&cname##_name,.constant=1,                  \
                      .plist=proplist,.next=NULL,                       \
                      .val=const_symref_sexp(&cname##_val)};            \
  symbol *cname=&cname##_val;                                           \
  sexp cname##_sexp=const_symref_sexp(&cname##_val)
#define MAKE_SYMBOL(cname,lname,sym_len,sym_hashv,sym_val,proplist,const_sym) \
  symbol_name cname##_name={.hashv=sym_hashv,                           \
                            .name_len=sym_len,.name=lname};             \
  symbol cname##_val={.val=val,.name=&cname##_name,.constant=const_sym  \
                      .plist=proplist,.next=NULL};                      \
  symbol *cname=&cname##_val;                                           \
  sexp cname##_sexp=const_symref_sexp(&cname##_val)
#define MAKE_TYPE(cname,lname,sym_len,sym_hashv,proplist,type_tag)      \
  symbol_name cname##_name={.hashv=sym_hashv,                           \
                            .name_len=sym_len,.name=#lname};            \
  symbol cname##_val={.name=&cname##_name,.constant=1,                  \
                      .plist=proplist,.next=NULL,                       \
                      .val={.tag=sexp_type,.val={.type=type_tag}}};     \
  symbol *cname = &cname##_val;                                         \
  sexp cname##_sexp = const_symref_sexp(&cname##_val)
#define PRIM_DEFSUBR(l_name,c_name,reqargs,optargs,keyargs,             \
                restarg,max_args,fieldname,arglist,type)                \
  subr c_name##_subr=                                                   \
    {.req_args=reqargs,.opt_args=optargs,.keyword_args=keyargs,         \
     .rest_arg=restarg,.maxargs=max_args,                               \
     .lname=l_name,.cname=#c_name,                                      \
     .comp = {.fieldname=c_name}, .signature=arglist,                   \
     .subr_type = type};
#define PRIM_DEFMACRO(l_name,c_name,reqargs,optargs,keyargs,            \
                 restarg,max_args,arglist)                              \
  DEFSUBR(l_name,c_name,reqargs,optargs,keyargs,                        \
          restarg,max_args,funevaled,arglist,subr_compiler_macro)
#endif
extern symbol *Etype;
extern sexp Etype_sexp;
extern symbol *Ebounds;
extern sexp Ebounds_sexp;
extern symbol *Efile;
extern sexp Efile_sexp;
extern symbol *Eread;
extern sexp Eread_sexp;
extern symbol *Eargs;
extern sexp Eargs_sexp;
extern symbol *Ekey;
extern sexp Ekey_sexp;
extern symbol *Efatal;
extern sexp Efatal_sexp;
extern symbol *Eundefined;
extern sexp Eundefined_sexp;
extern symbol *Eunbound;
extern sexp Eunbound_sexp;
extern symbol *Emath;
extern sexp Emath_sexp;
extern symbol *Eeof;
extern sexp Eeof_sexp;
extern symbol *Eio;
extern sexp Eio_sexp;
extern symbol *Eoverflow;
extern sexp Eoverflow_sexp;
extern symbol *Erange;
extern sexp Erange_sexp;
extern symbol *Econst;
extern sexp Econst_sexp;
extern symbol *Esystem;
extern sexp Esystem_sexp;
extern symbol *Eprint;
extern sexp Eprint_sexp;
extern symbol *Evisibility;
extern sexp Evisibility_sexp;
extern symbol *Tint8;
extern sexp Tint8_sexp;
extern symbol *Tint16;
extern sexp Tint16_sexp;
extern symbol *Tint32;
extern sexp Tint32_sexp;
extern symbol *Tint64;
extern sexp Tint64_sexp;
extern symbol *Tuint8;
extern sexp Tuint8_sexp;
extern symbol *Tuint16;
extern sexp Tuint16_sexp;
extern symbol *Tuint32;
extern sexp Tuint32_sexp;
extern symbol *Tuint64;
extern sexp Tuint64_sexp;
extern symbol *Terror;
extern sexp Terror_sexp;
extern symbol *Treal32;
extern sexp Treal32_sexp;
extern symbol *Treal64;
extern sexp Treal64_sexp;
extern symbol *Tbigint;
extern sexp Tbigint_sexp;
extern symbol *Tbigfloat;
extern sexp Tbigfloat_sexp;
extern symbol *Tchar;
extern sexp Tchar_sexp;
extern symbol *Tstring;
extern sexp Tstring_sexp;
extern symbol *Tarray;
extern sexp Tarray_sexp;
extern symbol *Tstream;
extern sexp Tstream_sexp;
extern symbol *Tfun;
extern sexp Tfun_sexp;
extern symbol *Tsymbol;
extern sexp Tsymbol_sexp;
extern symbol *Tmacro;
extern sexp Tmacro_sexp;
extern symbol *Ttype;
extern sexp Ttype_sexp;
extern symbol *Thashtable;
extern sexp Thashtable_sexp;
extern symbol *Tregex;
extern sexp Tregex_sexp;
extern symbol *Tnil;
extern sexp Tnil_sexp;
extern symbol *Tcons;
extern sexp Tcons_sexp;
extern symbol *Tenv;
extern sexp Tenv_sexp;
extern symbol *Tobarray;
extern sexp Tobarray_sexp;
extern symbol *Ttrue;
extern sexp Ttrue_sexp;
extern symbol *Tfalse;
extern sexp Tfalse_sexp;
extern symbol *Tuninterned;
extern sexp Tuninterned_sexp;
extern symbol *Qlambda;
extern sexp Qlambda_sexp;
extern symbol *Qclosure;
extern sexp Qclosure_sexp;
extern symbol *Qnil;
extern sexp Qnil_sexp;
extern symbol *Qlet;
extern sexp Qlet_sexp;
extern symbol *Qlet_star;
extern sexp Qlet_star_sexp;
extern symbol *Qwhile;
extern sexp Qwhile_sexp;
extern symbol *Qtagbody;
extern sexp Qtagbody_sexp;
extern symbol *Qgo;
extern sexp Qgo_sexp;
extern symbol *Qthrow;
extern sexp Qthrow_sexp;
extern symbol *Qcatch;
extern sexp Qcatch_sexp;
extern symbol *Qsetq;
extern sexp Qsetq_sexp;
extern symbol *Qunwind_protect;
extern sexp Qunwind_protect_sexp;
extern symbol *Qif;
extern sexp Qif_sexp;
extern symbol *Qprogv;
extern sexp Qprogv_sexp;
extern symbol *Qprogn;
extern sexp Qprogn_sexp;
extern symbol *Qreturn_from;
extern sexp Qreturn_from_sexp;
extern symbol *Qblock;
extern sexp Qblock_sexp;
extern symbol *Qquote;
extern sexp Qquote_sexp;
extern symbol *Qcomma;
extern sexp Qcomma_sexp;
extern symbol *Qbackquote;
extern sexp Qbackquote_sexp;
#endif
