/* This file is automatically generated, do not edit*/
/* Declarations of predefined symbols/macros to generate predefined symbols
   
   Copyright (C) 2014 Tucker DiNapoli

   This file is part of SciLisp.

   SciLisp is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   SciLisp is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with SciLisp.  If not, see <http://www.gnu.org*/
#ifndef _PRIM_H_
#define _PRIM_H_
#define DECLARE_GLOBAL(name)                    \
  extern symbol *name;                          \
  extern sexp name##_sexp;

#define DEFSUBR(cname,numargs)                    \
  sexp cname DEFUN_ARGS_##numargs ;               \
  extern subr cname ## _fun
#define DEFUN_ARGS_0	(void)
#define DEFUN_ARGS_1	(sexp)
#define DEFUN_ARGS_2	(sexp, sexp)
#define DEFUN_ARGS_3	(sexp, sexp, sexp)
#define DEFUN_ARGS_4	(sexp, sexp, sexp, sexp)
#define DEFUN_ARGS_5	(sexp, sexp, sexp, sexp,        \
                         sexp)
#define DEFUN_ARGS_6	(sexp, sexp, sexp, sexp,        \
                         sexp, sexp)
#define DEFUN_ARGS_7	(sexp, sexp, sexp, sexp,        \
                         sexp, sexp, sexp)
#define DEFUN_ARGS_8	(sexp, sexp, sexp, sexp,        \
                         sexp, sexp, sexp, sexp)
#define DEFUN_ARGS_MANY (uint64_t,sexp*)
#define DEFUN_ARGS_UNEVALED (sexp)
static void* GC_REALLOC_3(void* ptr,size_t old,size_t new){
  return GC_REALLOC(ptr,new);
}
static void GC_FREE_2(void* ptr,size_t size){
  return GC_FREE(ptr);
}
static void* GC_MALLOC_1(size_t size){
  return GC_MALLOC(size);
}
extern const sexp lisp_pi;
extern const sexp lisp_euler;
extern const sexp lisp_max_long;
extern const sexp lisp_mach_eps;
extern symref lisp_ans_ptr;
extern sexp type_of_tag(sexp_tag tag);
extern sexp type_of(sexp obj);
void init_prims();
#ifdef INSIDE_PRIMS
#define MAKE_SELF_QUOTING_SYMBOL(cname,lname,sym_len,sym_hashv,proplist) \
  symbol_name cname##_name={.hashv=sym_hashv,                           \
                            .name_len=sym_len,.name=lname};             \
  symbol cname##_val={.name=&cname##_name,.constant=1,                  \
                      .plist=proplist,.next=NULL,                       \
                      .val=const_symref_sexp(&cname##_val)};            \
  symbol *cname=&cname##_val;                                           \
  sexp cname##_sexp=const_symref_sexp(&cname##_val)
#define MAKE_SYMBOL(cname,lname,sym_len,sym_hashv,sym_val,proplist,const_sym) \
  symbol_name cname##_name={.hashv=sym_hashv,                           \
                            .name_len=sym_len,.name=lname};             \
  symbol cname##_val={.val=sym_val,.name=&cname##_name,                 \
                      .constant=const_sym,.plist=proplist,.next=NULL};  \
  symbol *cname=&cname##_val;                                           \
  sexp cname##_sexp=const_symref_sexp(&cname##_val)
#define MAKE_TYPE(cname,lname,sym_len,sym_hashv,proplist,type_tag)      \
  symbol_name cname##_name={.hashv=sym_hashv,                           \
                            .name_len=sym_len,.name=#lname};            \
  symbol cname##_val={.name=&cname##_name,.constant=1,                  \
                      .plist=proplist,.next=NULL,                       \
                      .val={.tag=sexp_type,.val={.type=type_tag}}};     \
  symbol *cname = &cname##_val;                                         \
  sexp cname##_sexp = const_symref_sexp(&cname##_val)
#define PRIM_DEFSUBR(l_name,c_name,reqargs,optargs,keyargs,             \
                restarg,max_args,fieldname,arglist,type)                \
  subr c_name##_subr=                                                   \
    {.req_args=reqargs,.opt_args=optargs,.keyword_args=keyargs,         \
     .rest_arg=restarg,.maxargs=max_args,                               \
     .lname=l_name,.cname=#c_name,                                      \
     .comp = {.fieldname=c_name}, .signature=arglist,                   \
     .subr_type = type};
#define PRIM_DEFMACRO(l_name,c_name,reqargs,optargs,keyargs,            \
                 restarg,max_args,arglist)                              \
  DEFSUBR(l_name,c_name,reqargs,optargs,keyargs,                        \
          restarg,max_args,funevaled,arglist,subr_compiler_macro)
#endif
//need to add later
#if 0
#define set_global_vars()                                               \
  lisp_stderr_sym.val.val.stream=stderr;                                \
  lisp_stdout_sym.val.val.stream=stdout;                                \
  lisp_stdin_sym.val.val.stream=stdin;                                  \
  mpz_t *mpz_const_1=xmalloc(sizeof(mpz_t));                            \
  mpz_t *mpz_const_0=xmalloc(sizeof(mpz_t));                            \
  mpfr_t *mpfr_const_1=xmalloc(sizeof(mpfr_t));                         \
  mpfr_t *mpfr_const_0=xmalloc(sizeof(mpfr_t));                         \
  mpfr_t *mpfr_const_e=xmalloc(sizeof(mpfr_t));                         \
  mpfr_t *mpfr_const_pi_var=xmalloc(sizeof(mpfr_t));                    \
  mpfr_t *mpfr_const_nan=xmalloc(sizeof(mpfr_t));                       \
  mpfr_t *mpfr_const_inf=xmalloc(sizeof(mpfr_t));                       \
  mpz_init((*mpz_const_0));                                             \
  mpfr_init((*mpfr_const_0));                                           \
  mpfr_init((*mpfr_const_nan));                                         \
  mpfr_init((*mpfr_const_inf));                                         \
  mpz_init_set_ui((*mpz_const_1),1);                                    \
  mpfr_init_set_ui((*mpfr_const_1),1,MPFR_RNDN);                        \
  mpfr_init((*mpfr_const_e));                                           \
  mpfr_init((*mpfr_const_pi_var));                                      \
  mpfr_exp(*mpfr_const_e,*mpfr_const_1,MPFR_RNDN);                      \
  mpfr_const_pi(*mpfr_const_pi_var,MPFR_RNDN);                          \
  mpfr_set_nan(*mpfr_const_nan);                                        \
  mpfr_set_inf(*mpfr_const_inf,1);                                      \
  lisp_bigint_0_sym.val.val.bigint=mpz_const_0;                         \
  lisp_bigint_1_sym.val.val.bigint=mpz_const_1;                         \
  lisp_bigfloat_0_sym.val.val.bigfloat=mpfr_const_0;                    \
  lisp_bigfloat_1_sym.val.val.bigfloat=mpfr_const_1;                    \
  lisp_bigfloat_e_sym.val.val.bigfloat=mpfr_const_e;                    \
  lisp_bigfloat_pi_sym.val.val.bigfloat=mpfr_const_pi_var

#define lisp_stderr {.tag = _stream,.val={.stream=0}}
#define lisp_stdout {.tag = _stream,.val={.stream=0}}
#define lisp_stdin {.tag = _stream,.val={.stream=0}}
#define lisp_mach_eps  {.tag=_double,.val={.real64=1.41484755040568800000e-16}}
#define lisp_pi  {.tag=_double,.val={.real64=3.14159265358979323846}}
#define lisp_euler {.tag=_double,.val={.real64=2.7182818284590452354}}
#define lisp_max_long  {.tag=_long,.val={.int64=LONG_MAX}}
#define lisp_double_0  {.tag=_double,.val={.real64=0.0}}
#define lisp_double_1  {.tag=_double,.val={.real64=1.0}}
#define lisp_long_0  {.tag=_long,.val={.int64=0}}
#define lisp_long_1  {.tag=_long,.val={.int64=1}}
//allocating static space for pointers, not actually initalizing constants
#define lisp_bigint_0  {.tag=_bigint,.val={.bigint=0}}
#define lisp_bigint_1  {.tag=_bigint,.val={.bigint=0}}
#define lisp_bigfloat_0   {.tag=_bigfloat,.val={.bigfloat=0}}
#define lisp_bigfloat_1   {.tag=_bigfloat,.val={.bigfloat=0}}
#define lisp_bigfloat_e {.tag=_bigfloat,.val={.bigfloat=0}}
#define lisp_bigfloat_pi {.tag=_bigfloat,.val={.bigfloat=0}}
#define lisp_NIL {.tag = -1,.val={.meta = -1}}
#define lisp_LISP_TRUE {.tag = -2,.val={.meta = 11}}
#define lisp_LISP_FALSE {.tag = -3,.val={.meta = -3}}
#define lisp_ans {.tag=-1,.val={.meta=-1},.quoted=0}
#endif
