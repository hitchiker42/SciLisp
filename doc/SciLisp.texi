\input texinfo
@c %**start of header
@set Time-stamp: <08 January 2014>
@setfilename SciLisp.info
@settitle SciLisp Manual
@codequoteundirected on
@codequotebacktick on
@documentencoding UTF-8
@set VERSION 0.02 alpha
@c %**end of header
@c @allowcodebreaks true/false; allow line breaking at _ or - in
@c @code{}(et. all) blocks
@copying
This manual is for SciLisp (version @value{VERSION}, last updated on
@value{Time-stamp:} @*
SciLisp is free software licensed under the GNU GPL V3+@*
Copyright @copyright{} 2013-2014 Tucker@w{ }DiNapoli
@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts. A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying
@titlepage
@title SciLisp Manual
@subtitle for version @value{VERSION}, @value{Time-stamp:}
@c @page
@vskip 0pt plus 1filll @c presumably some kind of vertical break
@author Tucker DiNapoli (@email{SciLisp@@gmail.com})
@insertcopying
@end titlepage
@contents
@c @ifnottex
@node Top
@top SciLisp
@c @end ifnottex
Manual for the SciLisp programming language
@menu
* Introduction:: Introduction to SciLisp and reasons for it's creation
* Usage:: How to call SciLisp and what the command line options do
* The SciLisp Language:: Informal introduction to the SciLisp language
* SciLisp Types:: The internal/optional type system of SciLisp
* Grammar:: Introduction to SciLisp grammar and formal grammar rules
* Standard Library:: The standard library of SciLisp
* Internals:: An attempt to describe the internals of SciLisp
* Differences from other lisps:: How SciLisp differs from other lisps,
                                 specifically common lisp and scheme.
* Development:: An overview of the development of SciLisp with emphasis
                on the topics of compiler design and the structure of
                the codebase 
* Concept Index::
* Function and Macro Index::
* Variable and Type Index::
* GNU Free Documentation License::
@end menu

@node Introduction
@chapter Introduction
@menu
* Design Overview::
@end menu
@cindex Introduction
@cindex General Introduction
SciLisp is a programming language in the LISP family largely influenced
by aspects of both Common Lisp and Scheme. The SciLisp compiler and
interpreter are the first programs of their kind written by the author
and are still a work in progress, the rest of this manual should be read
with this in mind. That said SciLisp attempts to be a proper programming
language usable for real world programming as opposed to a toy academic
language, though this is not yet the case. Because the writing of
SciLisp is and has been an exercise in learning compiler design and the
challenges and requirements of actually implementing said compiler much
of this manual is written with emphasis on the development and inner
workings of the compiler more than the usage of the language. For those
simply wishing to understand the usage of the SciLisp compiler or the
SciLisp language itself @pxref{Usage}, or @ref{The SciLisp Language},
respectively.
@node Design Overview
@section Design Overview
@node Usage
@chapter Usage
@menu
* The SciLisp Compiler:Invoking the Compiler
* The SciLisp Interpreter:Invoking the Interpreter
* Command Line Options::
@end menu
@node Invoking the Compiler
@section The SciLisp Compiler
@node Invoking the Interpreter
@section The SciLisp Interpreter
@node Command Line Options
@section Command Line Options
@table @option
@item -o | --output @{file@}
set the output file when compiling a file
@item -v | --version
print version information and exit
@item -e | --eval @{file | expression@}
if the argument is a filename evaluate the code in @var{file} and print
the results. if the argument is a SciLisp expression evaluate
@var{expression} and print the results. Otherwise exit with an error.
@item -l | --load @{file@}
load the file @var{file} and enter the interpreter
@item -n | --no-debug
if debugging is enabled in the SciLisp executable quiet all debugging
messages, if debugging in not enabled this option has no effect.
@item -q | --quiet
Do not print the banner or copyright information when starting the
interpreter. Additionally if debugging is enabled quiet all debugging
messages (i.e -q implies -n)
@item -h | --help
print the list of options and what they do and exit
@item -t | --test
run the test suite printing out the expressions that are evaluated as
well as the results.
@item -r | --regression
run the test suite silent, only indicating if all tests passed or if
some failed.
@end table
@node The SciLisp Language
@chapter The SciLisp Language
@node SciLisp Types
@chapter SciLisp Types
@menu
* Atoms::
* Cons::
* Functions::
* Macros::
@end menu
@cindex Types
SciLisp has a well defined type hierarchy and a core set of predefined
types with the ability of the programmer to add new types expected to be
added to the language. That said by default SciLisp is dynamically typed
as is typical for a Lisp language. Types are exposed to the programmer
via optional type annotations similar to those present in standard ml or
haskell. Unlike the aforementioned languages which are statically type
and use type inference to fill in non annotate type, type annotation in
SciLisp is an all or nothing affair. If a SciLisp program uses type
annotations the entire program will be type checked at compile time and
rejected if it contains type errors. Type annotations are only available
in compiled code, they are silently ignored in interpreted code.
@c You Know what I need to come up with a better type hierarchy first
@node Atoms
@section Atoms
@cindex Floating Point Numbers
@cindex Integers
@cindex Numbers
@cindex Characters
@cindex Strings
@cindex Booleans
@menu
* Numbers::
@c * Floating Point Numbers::
@c * Integers::
* Booleans::
@end menu
@node Numbers
@subsection Numbers
@subsubsection Standandard Numerical Types
The standard numerical types in SciLisp correspond exactly to C
floating point types and the C integer types from stdint.h. The naming
comvention for SciLisp types is modeled after the naming conventions
used in standard ml, specifically the standard ml basis
library. Integers are named Int<X> for signed integers and UInt<X> for
unsigned integers, where X is the size of the integer in bits, thus
Uint32 is a 32 bit unsigned integer. The default unadorned Int type
corresponds to a signed 64 bit integer. Floating point numbers in
SciLisp are either Real32 or Real64 corresponding to a C float and a C
double, the default Real type is Real64.
@subsubsection Arbitrary Precision Types
Beyond the standard C numerical types SciLisp provides support for
arbitrary precision arithmetic by way of the gmp and mpfr
libraries. Naming conventions are again taken from standard ml, with
arbitrary precision integers having the type bigint and arbitrary
precision floats having the type bigfloat. Bigint and bigfloat numbers
can be created using the @code{bigint} and @code{bigfloat}
functions. While the bigint and bigfloat types correspond to pointer
types in C (mpz_t* and mpfr_t*) they are treated as value types in
SciLisp, every primitive function with bigint or bigfloat operands
creates an internal copy of their arguments.
@defun bigint number-or-string
@defunx bigfloat number-or-string
The @code{bigint} and @code{bigfloat} functions convert a number (of
any numeric type) or string into an arbitrary precision integer or
floating point number respectively. @var{number-or-string} can be a
literal integer or floating point number, or a varible representing
any numeric type, including bigint or bigfloat, or a string, which
allows numbers which would not fit into a standard numeric type to be
created. 
@end defun
@subsubsection Promotion Rules
SciLisp numberical types are aranged in a hierarchy according to the
range of numbers representable in that type. At the top are the bigint
and bigfloat types, which can be freely interconverted, with bigfloats
being rounded to fit into a bigint. Next are the floating point
numbers, Real64 followed by Real32. Integers form two seperate
branches for the signed vs unsigned types arranged accordnig to their
size in bits (64,32,16.8). Signed and unsigned
integers are implictly cast between each other where necssary, however
and error is raised if this is not possible. A number can
be implicly cast to any type that is higher up in the type
heirachy. Generally functions named by a symbol (+,-,|,&,etc) will
only work on the primitive numeric types while functions named by a
word (add,sub,iorb,andb,etc) act on any numeric type. Conventions for
named mathmatical functions(log,cos,exp,etc) have yet to be decided.
@node Booleans
@subsection Booleans
There are two values of the boolean type, #t represents true and #f
false. These are the result of any boolean expression and can be used
if a literal true or false is needed, however all SciLisp values can
be used where a boolean is expected. A value of 0 or nil (and probaly
the empty string) is false while any other value is considered
true. There is one quirk to keep in mind abount this, a 0 value must
be in a standard numeric type, thus a bigint 0 would be considered true.
@node Cons
@section Cons
@c Incomplete
The cons type in SciLisp acts the same as it does in most other
lisps. A cons is logically a pair of values, the first of which is
refered to as the car which the second is the cdr. A literal cons cell
is represented as @code{(car . cdr)}, this is generally known as a
dotted pair. Cons cells are generally used to create a list, using the
dotted pair syntax a list 1,2,3 would be written as 
@code{(1 . ( 2 . (3 . nil)))}, where @code{nil} is the value used to
indicate the end of a list. Since lists are used so commonly and the
dotted pair syntax is rather cumbersome the same list can be written
more conviently as @code{(1 2 3)} which means exactly the same thing
as the dotted pair syntax. A list where the last cell is not of the form
@code{(foo . nil)} is called an @dfn{incomplete list}. A incomplete list
can be written using cons cells or more simply as @code{(1 2 3
. foo)}. The symbol nil is typically special in lisp, being used to
represent the end of a list, or a non-existent value. The symbol nil
in SciLisp only represents a null value, the value '() represents the
empty list and #f represents falsity. In boolean contexts nil evaluates
to #f, but nil itself is not a boolean value. 
@node Functions
@section Functions
@node Macros
@section Macros
@node Grammar
@menu
* SciLisp Syntax and Semantics: Syntax and Semantics
* Formal Grammar::
@end menu
@chapter Grammar
@section Introduction
This section describes the syntax and semantics of the SciLisp
language. The grammar of the language is first described in an informal
way, which is hopefully easy to understand. Following this is a more
formal definition of the language using a version of EBNF.@footnote{EBNF or
Extended Backus-Naur Form is a way of describing a context free
grammar (usually a programming language) in terms of terminal and
non-terminal symbols. Briefly terminal symbols are some form of literal
text and non-terminals are rules describing how other symbols interact.}
SciLisp is very much a work in progress and while it is hoped that much
of the grammar is fairly stable it should be noted that any of this
information is subject to change. That said any changes will likely be
minor and the high level grammar will remain the same.
@node Syntax and Semantics
@section SciLisp Syntax and Semantics
The core grammar of SciLisp is the same as most other lisps, all
programs consist of one or more s-expressions. @footnote{s-expression
stands for symbolic expression but the term s-expression is generally
used on its own not as an abbreviation.}. An
@abbr{@dfn{sexp},s-expression} is one of two things, an @dfn{atom} such
as an integer,floating point number, or string, or a @dfn{cons-cell}
which is an expression of the form @code{(a . b)} where a and b are
themselves sexps (@pxref{Cons}).

@c more on sexps and lists, befor this next bit
As is traditional with most lisps SciLisp has a core set of special
forms to allow for types of code which can not be easily be expressed
using functions/lambda calculus. These special forms are the only truly
immutable part of the language, all other functions and macros use in
the language are built using the same set of tools available to the user
and, if desired the user can modify any aspect of the language other
than these special forms. The special forms in SciLisp are:
@table @code
@item if
@lisp (if @var{cond} @var{then} @var{else}) 
@end lisp
evaluate @var{cond} if @var{cond} evaluates to true evaluate @var{then}
if @var{cond} evaluates to false evaluate @var{else} (@pxref{Booleans,,Atoms}).
@end table
@node Formal Grammar
@section Formal Grammar
The SciLisp grammar in EBNF form.

@table @code
@item program :=
%nothing | @code{program},@code{sexp}
@item sexp :=
@code{atom} | @code{cons} | @code{quasiquoted sexp}
@item atom :=
@code{literal} | @code{special form} | @code{symbol} | @code{nil}
@item cons :=
'(',@code{sexp},@{@code{sexp}@},['.',@code{sexp}]')' | @code{list}
@item list :=
'(' @code{sexp}* ')'
@item literal :=
@code{number} | @code{character} | @code{string} | @code{quoted sexp} | @code{array}
@item quoted sexp :=
''' @code{sexp}
@item number :=
@code{float} | @code{int}
@item int :=
[+-]?[0-9]+ | [+-]?0x[0-9a-fA-F]+
@item hex int :=
[+-]?[0-9a-fA-F]+
@item float :=
[+-]?[0-9]+('.'[0-9]*|('.'[0-9]*)?'e'[0-9]+)
@item array :=
@code{vector} | @code{matrix}
@code{vector}:=
'['@code{sexp}*']'
@code{matrix}:=
'[['(@code{matrix}*)|(@code{float}*|@code{int}*)']]'
@item character :=
'?'(<unicode character> - @{?\@} | '\?' | '\\' | '\x[0-9]@{1,2@}' |
'\u[0-9]@{1,4@} | '\U[0-9]@{1,8@}' | '\n' | '\t')
@item string :=
'"'(<unicode character>@{-@}@{"@}|"\""'"'
@item symbol :=
@code{keysym} | @code{identifier}
@item keysym :=
':' @code{identifier}
@item identifier :=
@c I'll do this later
@item special form :=
@c I'll do this later
@item quasiquoted sexp :=
@c later
@end table

@node Standard Library
@chapter Standard Library
@menu
* Conses::
* Mathematics::
* Arrays::
* Strings::
* Regular Expressions::
* Input/Output::
* System Interface::
@end menu
@node Conses
@section Conses
@c defination example
@defun car cons-cell
@defunx cdr cons-cell
return the car or cdr of @var{cons-cell} or @code{nil} if @var{cons-cell} is
@code{nil}. @code{car} and @code{cdr} return an error if @var{cons-cell} is
not a cons cell.
@end defun
@defun safe-car cons-cell
@defunx safe-cdr cons-cell
@var{safe-car} and @var{safe-cdr} behave exactly like @code{car} and
@code{cdr} is @var{cons-cell} is a cons cell or @code{nil} however they
simply return @code{nil} if @var{cons-cell} is some other type.
@end defun
@defspec do (@var{var} [@var{from} @var{to} @
         [@var{inc}]]) @var{body}@dots{}
repeat body @math{@var{to}-@var{from}/@var{inc}} times with @var{var} bound
initially to @var{from} and incremented by @var{inc} each iteration
until @var{var} equals @var{to}. if [@var{from} @var{to}] is omitted
loop indefinitely, unless a @code{break} or @code{return} statement is
reached in @var{body}. If @var{inc} is omitted it defaults to
@math{@var{to}-@var{from}/|@var{to}-@var{from}|}.
@end defspec
@node Mathematics
@section Mathematics
@node Arrays
@section Arrays
@node Strings
@section Strings
@node Regular Expressions
@section Regular Expressions
@node Input/Output
@section Input/Output
@node System Interface
@section System Interface
@node Internals
@chapter Internals
@subsection Coding Style
As is (or should be) the case with any software project SciLisp is
written using a specific coding style. The actual SciLisp lisp code is
just written in normal lisp style, lisp doesn't have much to argue
about syntax wise. For the c code there is a fairly strict, but
hopefully reasonable set of rules.
@itemize @minus
@item 
indentation is two spaces
@item
brace style is the same for any block and is of the form
@example
void foo(){
  ...code
  if(bar){
    ...
  } else if (baz) {
    ...
  } else {
    ...
  }
@end example
@item
case labels in switch statements receive and additional level of
indentation
@item
single line if staements or loops @emph{must} be enclosed in braces
@node Differences from other lisps
@chapter Differences from other lisps
@node Development
@chapter Development
@node Concept Index
@unnumbered Concept Index
@printindex cp
@node Function and Macro Index
@unnumbered Function and Macro index
@printindex fn
@node Variable and Type Index
@unnumbered Variable and Type Index
@printindex vr @c also tp
@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl.texi
@bye
this is after @bye so it's all a comment.
I'm going to sketch out ideas for the type hierarchy
in no real order we have:
number -> long or double (or int/short/char or float)
text -> char or string or array  of chars(not the same as a string)
@c  a string in c is a CORD, so a string is an array of
@c  characters(essentially), while a char is a wchar_t in c so an
@c  array of characters is an array of wchar_t's(or ints) while
@c  Unicode will work in either case it'll be utf-8 for the CORDs(or
@c  lisp strings) and utf-32 for the characters/character arrays
sequence -> list or array/vector or string
map -> assoc list or hash table
cons -> list, dotted pair, tree or code

@c Local Variables:
@c mode: texinfo
@c eval: (flyspell-mode)
@c time-stamp-format: "%02d %:b %:y"
@c eval: (flyspell-mode)
@c End:
